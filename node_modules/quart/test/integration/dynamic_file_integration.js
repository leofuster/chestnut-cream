const fs = require('fs');
const http2 = require('http2');

const {
  HTTP2_HEADER_PATH,
  HTTP2_HEADER_METHOD,
  HTTP2_HEADER_STATUS
} = http2.constants;

const {
  get_single_resource,
  write_temp_file
} = require('../utils');

describe('Dynamic File Serving Test Suite', function () {
  this.timeout(5000);
  let data = ['Hello World From File', 'Some long text that could be shorter'];
  let filePaths = [];

  before(async () => {
    filePaths = [
      await write_temp_file(data[0]),
      await write_temp_file(data[1]),
      await write_temp_file('')
    ];
    app.handle('/handle_file', async (stream) => stream.sendFile(filePaths[0]));
    app.handle('/handle_file_not_found', async (stream) => stream.sendFile(filePaths[0] + '_not_found'));
    app.handle('/handle_file_partial', async (stream) => stream.sendFile(filePaths[1], 5, 9));
  });

  it('should send a file', async () => {
    const { body, headers } = await get_single_resource(port, '/handle_file');

    expect(headers).to.have.property(':status', 200);
    expect(headers).to.have.property('content-type', 'application/octet-stream');
    expect(body).to.equal(data[0]);
  });

  it('should return 404 for an invalid file/path', async () => {
    const { body, headers } = await get_single_resource(port, '/handle_file_not_found');

    expect(headers).to.have.property(':status', 404);
    expect(headers).to.have.property('content-type', 'text/plain');
    expect(body).to.equal("File Not Found");
  });

  it('should send parts of a file', async () => {
    const { body, headers } = await get_single_resource(port, '/handle_file_partial');

    expect(headers).to.have.property(':status', 200);
    expect(headers).to.have.property('content-type', 'application/octet-stream');
    expect(body).to.equal("long text");
  });

  it('should send from a file descriptor', async () => {
    const filePath = filePaths[2];
    const fd = fs.openSync(filePath, 'w+');

    const writeStream = fs.createWriteStream(filePath, { fd });

    app.handle('/handle_fd', async (stream) => stream.sendFD(fd, 1, 12));

    setImmediate(() => writeStream.write(" Hello World!----"));

    const { body, headers } = await get_single_resource(port, '/handle_fd');

    expect(headers).to.have.property(':status', 200);
    expect(headers).to.have.property('content-type', 'application/octet-stream');
    expect(body).to.equal("Hello World!");
  });
});