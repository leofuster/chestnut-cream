const http2 = require('http2');
const {
  HTTP2_HEADER_PATH,
  HTTP2_HEADER_METHOD,
  HTTP2_HEADER_STATUS
} = http2.constants;
const { get_single_resource } = require('../utils');

describe('Flight Middleware Integration Suite', function () {
  this.timeout(5000);
  let store = new Map();
  const HANDLER = Symbol('handler');
  const PREFLIGHT = Symbol('preflight');
  const PREFLIGHT_2 = Symbol('preflight2');
  const POSTFLIGHT = Symbol('postflight');
  const POSTFLIGHT_2 = Symbol('postflight');
  const success_response = {
    status: "success"
  };
  let callStack = [];

  before(function () {
    app.handle('/middleware', async (stream) => {
      store.set('query', stream.query);
      callStack.push(HANDLER);
      return success_response;
    });
  });

  it('should support preflight middleware', async () => {
    // Reset callstack
    callStack = [];

    app.use(async (stream, next) => {
      callStack.push(PREFLIGHT);
      await next();
    });

    const { body, headers } = await get_single_resource(port, '/middleware');
    expect(headers).to.have.property(HTTP2_HEADER_STATUS, 200);
    expect(headers).to.have.property('content-type', 'application/json');
    expect(body).to.eql(JSON.stringify(success_response));
    expect(callStack).to.include.ordered.members([PREFLIGHT, HANDLER]);
  });

  it('should support postflight middleware', async () => {
    // Reset callstack
    callStack = [];

    app.use(async (stream, next) => {
      callStack.push(POSTFLIGHT);
      await next();
    });

    const { body, headers } = await get_single_resource(port, '/middleware');
    expect(headers).to.have.property(HTTP2_HEADER_STATUS, 200);
    expect(headers).to.have.property('content-type', 'application/json');
    expect(body).to.eql(JSON.stringify(success_response));
    expect(callStack).to.include.ordered.members([PREFLIGHT, POSTFLIGHT, HANDLER]);
  });

  it('should support multiple middleware', async () => {
    // Reset callstack
    callStack = [];

    app.use(async (stream, next) => {
      callStack.push(PREFLIGHT_2);
      await next();
    });

    app.use(async (stream, next) => {
      callStack.push(POSTFLIGHT_2);
      await next();
    });

    const { body, headers } = await get_single_resource(port, '/middleware');
    expect(headers).to.have.property(HTTP2_HEADER_STATUS, 200);
    expect(headers).to.have.property('content-type', 'application/json');
    expect(body).to.eql(JSON.stringify(success_response));
    expect(callStack).to.include.ordered.members([PREFLIGHT, POSTFLIGHT, PREFLIGHT_2, POSTFLIGHT_2, HANDLER]);
  });
});