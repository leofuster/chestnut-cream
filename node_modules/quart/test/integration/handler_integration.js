const http2 = require('http2');
const {
  HTTP2_HEADER_PATH,
  HTTP2_HEADER_METHOD,
  HTTP2_HEADER_STATUS
} = http2.constants;
const { get_single_resource } = require('../utils');

describe('Handler Integration Suite', function () {
  this.timeout(5000);
  before(function () {
    app.handle('/handle', async (stream) => {
      return {
        status: "success"
      };
    });
  });

  it('should support a handle', async () => {
    const { body, headers } = await get_single_resource(port, '/handle');

    expect(headers).to.have.property('content-type', 'application/json');
    expect(() => JSON.parse(body)).to.not.throw();
    expect(JSON.parse(body)).to.eql({
      status: "success"
    });
  });

  it('should respond with given status and headers', async () => {
    app.handle('/handle_status_and_headers', async (stream) => {
      stream.setStatus(202);
      stream.respond({
        accepted: 'yes',
        'content-type': 'plain/text'
      });
      stream.end('done');
    });

    const { body, headers } = await get_single_resource(port, '/handle_status_and_headers');

    expect(headers).to.have.property(HTTP2_HEADER_STATUS, 202);
    expect(headers).to.have.property('accepted', 'yes');
    expect(headers).to.have.property('content-type', 'plain/text');
    expect(body).to.eql("done");
  });

  it('should queue handles', async () => {
    const responseBody = {
      status: "success",
      type: "handle",
      revision: 2
    };

    app.handle('/handle_queue_test', async (stream, next) => {
      stream.respond({
        'content-type': 'application/json',
        'x-tested': 'yes'
      });
      await next();
    });
    app.handle('/handle_queue_test', async (stream) => stream.end(JSON.stringify(responseBody)));

    const { body, headers } = await get_single_resource(port, '/handle_queue_test');

    expect(headers).to.have.property('content-type', 'application/json');
    expect(headers).to.have.property('x-tested', 'yes');
    expect(() => JSON.parse(body)).to.not.throw();
    expect(JSON.parse(body)).to.eql(responseBody);
  });
});