const fs = require('fs');
const http2 = require('http2');
const {
  HTTP2_HEADER_PATH,
  HTTP2_HEADER_METHOD,
  HTTP2_HEADER_STATUS
} = http2.constants;

const {
  get_single_resource,
  write_temp_file
} = require('../utils');

describe('Return Types Integration Suite', function () {
  this.timeout(5000);
  before(async () => {
    const temp_file = await write_temp_file("Hello Stream!");

    app.handle('/return_types_string', async (stream) => "Hello World!");

    app.handle('/return_types_json', async (stream) => ({
      type: "JSON",
      status: "success"
    }));

    app.handle('/return_types_buffer', async (stream) => Buffer.alloc(4, 'f'));

    app.handle('/return_types_stream', async (stream) => fs.createReadStream(temp_file));
  });

  it('should support string return type', async () => {
    const { body, headers } = await get_single_resource(port, '/return_types_string');

    expect(headers).to.have.property('content-type', 'plain/text');
    expect(body).to.eql("Hello World!");
  });

  it('should support json return type', async () => {
    const { body, headers } = await get_single_resource(port, '/return_types_json');

    expect(headers).to.have.property('content-type', 'application/json');
    expect(() => JSON.parse(body)).to.not.throw();
    expect(JSON.parse(body)).to.eql({
      type: "JSON",
      status: "success"
    });
  });

  it('should support Buffer return type', async () => {
    const { body, headers } = await get_single_resource(port, '/return_types_buffer');

    expect(headers).to.have.property('content-type', 'application/octet-stream');
    expect(body).to.eql("ffff");
  });

  it('should support Stream return type', async () => {
    const { body, headers } = await get_single_resource(port, '/return_types_stream');

    expect(headers).to.have.property('content-type', 'application/octet-stream');
    expect(body).to.eql("Hello Stream!");
  });
});