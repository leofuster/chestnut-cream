const fs = require('fs');
const http2 = require('http2');

const {
  HTTP2_HEADER_PATH,
  HTTP2_HEADER_METHOD,
  HTTP2_HEADER_STATUS
} = http2.constants;

const {
  get_pushy_resource,
  get_single_resource,
  write_temp_file
} = require('../utils');

describe('Push Test Suite', function () {
  this.timeout(5000);
  let data = ['Hello World From File', 'Pushy file'];
  let filePaths = [];

  before(async () => {
    filePaths = [
      await write_temp_file(data[0]),
      await write_temp_file(data[1])
    ];
    app.handle('/handle_push', async (stream) => {
      await stream.push('/push_file');
      stream.sendFile(filePaths[0]);
    });
    app.handle('/push_file', async (stream) => stream.sendFile(filePaths[1]));
  });

  it('should serve a file on a pushy handle', async () => {
    const { body, headers } = await get_single_resource(port, '/handle_push');

    expect(headers).to.have.property(':status', 200);
    expect(headers).to.have.property('content-type', 'application/octet-stream');
    expect(body).to.equal(data[0]);
  });

  it('should push a file', (done) => {
    let flag = 0;
    get_pushy_resource(port, '/handle_push', (body, headers) => {
      expect(headers).to.have.property(':status', 200);
      expect(headers).to.have.property('content-type', 'application/octet-stream');
      expect(body).to.equal(data[1]);
      if (flag++ >= 1) done();
    }, (body, headers) => {
      expect(headers).to.have.property(':status', 200);
      expect(headers).to.have.property('content-type', 'application/octet-stream');
      expect(body).to.equal(data[0]);
      if (flag++ >= 1) done();
    });
  });
});