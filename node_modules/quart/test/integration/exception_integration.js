const http2 = require('http2');
const {
  HTTP2_HEADER_PATH,
  HTTP2_HEADER_METHOD,
  HTTP2_HEADER_STATUS
} = http2.constants;
const { get_single_resource } = require('../utils');

describe('Exception Handling Integration Suite', function () {
  this.timeout(5000);
  const { SafeError } = app;

  before(function () {
    app.handle('/throwy_handle', async (stream) => {
      if (stream.query.throw) throw new Error("Some internal error happened");
      
      return {
        status: "success"
      };
    });

    app.handle('/safe_throwy_handle', async (stream) => {
      if (stream.query.throw) throw new SafeError("Bad input", 400);
      
      return {
        status: "success"
      };
    });
  });

  it('should handle unsafe errors', async () => {
    const { body, headers } = await get_single_resource(port, '/throwy_handle?throw=true');

    expect(headers).to.have.property('content-type', 'text/plain');
    expect(headers).to.have.property(HTTP2_HEADER_STATUS, 500);
    expect(body).to.equal("Internal Server Error");
  });

  it('should handle safe errors', async () => {
    const { body, headers } = await get_single_resource(port, '/safe_throwy_handle?throw=true');

    expect(headers).to.have.property('content-type', 'text/plain');
    expect(headers).to.have.property(HTTP2_HEADER_STATUS, 400);
    expect(body).to.equal("Bad input");
  });
});