const http2 = require('http2');
const {
  HTTP2_HEADER_PATH,
  HTTP2_HEADER_METHOD,
  HTTP2_HEADER_STATUS
} = http2.constants;

const getBodyAndHeaders = async (stream, _headers) => {
  let headers = _headers || {};
  let body = '';

  return new Promise((resolve, reject) => {
    stream.setEncoding('utf8');

    stream.on('response', (resHeaders) => {
      headers = Object.assign(headers, resHeaders);
    });

    stream.on('push', (resHeaders) => {
      headers = Object.assign(headers, resHeaders);
    });

    stream.on('data', (d) => body += d);
    stream.on('end', (chunk) => {
      stream.end();
      resolve({ body, headers });
    });
    stream.on('error', (error) => reject(error));
  });
};

module.exports = (port, path, onPush, onResults, requestHeaders) => {
  const client = http2.connect(`https://localhost:${port}`);
  client.settings({ enablePush: true });

  client.on('stream', async (stream) => {
    const { body, headers } = await getBodyAndHeaders(stream);
    onPush(body, headers);
  });

  client.once('localSettings', async (settings) => {
    const req = client.request(Object.assign({
      [HTTP2_HEADER_METHOD]: 'GET',
      [HTTP2_HEADER_PATH]: path
    }, requestHeaders || {}));

    const { body, headers } = await getBodyAndHeaders(req);
    onResults(body, headers);
  });
};